<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iRonhead</title>
    <description>wait.
</description>
    <link>http://ironhead.bitbucket.com/</link>
    <atom:link href="http://ironhead.bitbucket.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 19 Jun 2015 00:26:11 +0800</pubDate>
    <lastBuildDate>Fri, 19 Jun 2015 00:26:11 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Project Euler: Harshad Numbers</title>
        <description>&lt;h1 id=&quot;go-to-problemhttpsprojecteulernetproblem387&quot;&gt;&lt;a href=&quot;https://projecteuler.net/problem=387&quot;&gt;Go to Problem&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;It’s easy since I spent only &lt;strong&gt;30+&lt;/strong&gt; minutes. So try it before read my thought and you’ll have some fun.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I ‘guess’ it would be very slow to check all primes one by one.&lt;/li&gt;
  &lt;li&gt;[1..9] are all Harshad numbers (seeds).&lt;/li&gt;
  &lt;li&gt;Take one seed, add one digit to it and check if it’s valid. For example, take 2, check [20..29]. All valid numbers are new seeds.&lt;/li&gt;
  &lt;li&gt;Check if a new seed is also a strong Harshad number.&lt;/li&gt;
  &lt;li&gt;If a seed is a strong Harshad number, append one digit to it and check if it’s a ‘strong, right truncatable Harshad primes’. For example, 201 is a strong Harshad number, check if [2010..2019] are primes.&lt;/li&gt;
  &lt;li&gt;Sum all valid primes, done.&lt;/li&gt;
  &lt;li&gt;This is actually a &lt;strong&gt;tree&lt;/strong&gt; structure, solve it with &lt;strong&gt;BFS&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;sympy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;isprime&lt;/span&gt;

K = &lt;span class=&quot;integer&quot;&gt;100000000000000&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;add_digit&lt;/span&gt;(seed) :
    res = []

    k = seed[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;] * &lt;span class=&quot;integer&quot;&gt;10&lt;/span&gt;
    p = seed[&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;]

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;integer&quot;&gt;10&lt;/span&gt;) :
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (k + i) % (p + i) == &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt; :
            res.append([k + i, p + i])

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;check_primes&lt;/span&gt;(seed) :
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; isprime(seed[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;] // seed[&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;]) :
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;

    k = &lt;span class=&quot;integer&quot;&gt;10&lt;/span&gt; * seed[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;]

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; k &amp;gt;= K :
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;

    s = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;) :
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; isprime(k + i) :
            s += k + i

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s

seeds_0 = [
    [&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;],
    [&lt;span class=&quot;integer&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;6&lt;/span&gt;], [&lt;span class=&quot;integer&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;7&lt;/span&gt;], [&lt;span class=&quot;integer&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;8&lt;/span&gt;], [&lt;span class=&quot;integer&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;9&lt;/span&gt;]
]

seeds_1 = []

SSRTHP = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;len&lt;/span&gt;(seeds_0) &amp;gt; &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt; :
    seeds_0, seeds_1 = [], seeds_0

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; seed &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; seeds_1 :
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; seed[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;] &amp;gt;= K :
            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;

        seeds_0 += add_digit(seed)

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; seed &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; seeds_0 :
        SSRTHP += check_primes(seed)


print(SSRTHP)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 19 Jun 2015 00:00:00 +0800</pubDate>
        <link>http://ironhead.bitbucket.com/2015/06/19/project-euler-0387.html</link>
        <guid isPermaLink="true">http://ironhead.bitbucket.com/2015/06/19/project-euler-0387.html</guid>
        
        <category>python</category>
        
        <category>math</category>
        
        <category>programming</category>
        
        
      </item>
    
      <item>
        <title>Project Euler: Hexagonal tile differences</title>
        <description>&lt;h1 id=&quot;go-to-problemhttpsprojecteulernetproblem128&quot;&gt;&lt;a href=&quot;https://projecteuler.net/problem=128&quot;&gt;Go to Problem&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/project-euler-128.gif&quot; alt=&quot;hexagon&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;It’s easy since I spent only &lt;strong&gt;2+&lt;/strong&gt; hours. So try it before read my thought and you’ll have some fun.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;1, 2, 8, 19 are the first 4 valid numbers.&lt;/li&gt;
  &lt;li&gt;Consider each ring as 6 vertex and many other nodes in edge.&lt;/li&gt;
  &lt;li&gt;Consider the series of vertice in direction 2, It’s 1, 2, 8, 20, ….&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
    2  &amp; = 6 \cdot 0 + 2 \\
    8  &amp; = 6 \cdot 1 + 2 \\
    20 &amp; = 6 \cdot 2 + 8 \\
    38 &amp; = 6 \cdot 3 + 20 \\
    \vdots \\
    K_i &amp; = 6 \cdot (i - 1) + K_{i-1} \\
    \end{align} %]]&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;We know every number in a ring if we know it first vertex in the previous series. For
example, the 3rd rind is:&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;20, 21, 22,
23, 24, 25,
26, 27, 28,
29, 30, 31,
32, 33, 34,
35, 36, 37,&lt;/script&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Every node has 2 neighbors which are in the same ring. For example, 10 and 12 are
neighbors of 11, their difference is always 1 (10 - 11, and 12 - 11) which are not primes.
So except the first and last node in a ring, all nodes have at least 2 neighbors are not primes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Consider all vertice in 3, 5, 7 directions. The series in each direction is interleave
with odd and even number, for example: [3, 10, 23, 42, …] is [odd, even, odd, even, …].
Now let’s check 10, it’s next vertex neighbor is 23, which is odd, and neighbors of 23 in it’s ring is 22, 24, which are evens, then 10 has 2 more difference which are not primes (even - even). We can find the same property in odd vertex. All of them have ate least 4 non-primes
neighbors (2 + property 4).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Consider all vertice in 4 and 6 directions. They are all even which provide 2 non-prime neighbor difference.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Consider all edge nodes. They all have 2 neighbors from both outer and inner rings. For example, 11 has [3, 4] and [24, 25], 2 even and 2 odd which means no matter the node
is even or odd, it’s 4 neighbors give it at least 2 more non-prime neighbor difference.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;So, all we have to do is checking vertex in direction 2 (2, 8, 20, 38, ….) and the last
node in each ring (7, 19, 37, 61, …).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;code-in-python&quot;&gt;Code in Python&lt;/h1&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;sympy&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;isprime&lt;/span&gt;


&lt;span class=&quot;comment&quot;&gt;# 1, 2, 8, 19&lt;/span&gt;
L = &lt;span class=&quot;integer&quot;&gt;2000&lt;/span&gt;
T = &lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;
S = [&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;19&lt;/span&gt;]

a = &lt;span class=&quot;integer&quot;&gt;8&lt;/span&gt;
b = &lt;span class=&quot;integer&quot;&gt;20&lt;/span&gt;
c = &lt;span class=&quot;integer&quot;&gt;38&lt;/span&gt;
d = &lt;span class=&quot;integer&quot;&gt;62&lt;/span&gt;

k = &lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;len&lt;/span&gt;(S) &amp;lt; L :
    &lt;span class=&quot;comment&quot;&gt;# first and last&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; isprime(&lt;span class=&quot;predefined&quot;&gt;abs&lt;/span&gt;(b - c + &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;)) :
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; isprime(&lt;span class=&quot;predefined&quot;&gt;abs&lt;/span&gt;(b - c - &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;)) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; isprime(&lt;span class=&quot;predefined&quot;&gt;abs&lt;/span&gt;(b - d + &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;)) :
            S.append(b)

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; isprime(&lt;span class=&quot;predefined&quot;&gt;abs&lt;/span&gt;(c - &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt; - a)) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; isprime(&lt;span class=&quot;predefined&quot;&gt;abs&lt;/span&gt;(c - d + &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;)) :
            S.append(c - &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;)

    a, b, c, d = b, c, d, d + d - c + &lt;span class=&quot;integer&quot;&gt;6&lt;/span&gt;


print(S[L - &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 16 Jun 2015 00:00:00 +0800</pubDate>
        <link>http://ironhead.bitbucket.com/2015/06/16/project-euler-0128.html</link>
        <guid isPermaLink="true">http://ironhead.bitbucket.com/2015/06/16/project-euler-0128.html</guid>
        
        <category>python</category>
        
        <category>math</category>
        
        <category>programming</category>
        
        
      </item>
    
      <item>
        <title>Decimal in Django JSON Encoder</title>
        <description>&lt;p&gt;I am developing a “desktop” application running on “browser” using “django”. When
I need json response, I use django’s JsonResponse class. JsonResponse encode a dictionary
into json format and it handle datetime and decimal types. The problem is JsonResponse
encodes decimal to strings. I found some posts said this issue began after django stoped
using simplejson. What makes django translate decimals into strings? What if I
want numbers, not strings in json? I finally managed to solve it in a not-that-smart
way and here it is.&lt;/p&gt;

&lt;h1 id=&quot;how-does-djangos-jsonresponse-encode-dictionaries&quot;&gt;How does django’s JsonResponse encode dictionaries?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/django/django/blob/stable/1.7.x/django/http/response.py&quot;&gt;django 1.7 JsonResponse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JsonResponse use python’s json library and DjangoJSONEncoder (default).&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;json&lt;/span&gt;

...

&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;JsonResponse&lt;/span&gt;(HttpResponse):
    &lt;span class=&quot;docstring&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;    An HTTP response class that consumes data to be serialized to JSON.&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;    :param data: Data to be dumped into json. By default only ``dict`` objects&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;      are allowed to be passed due to a security flaw before EcmaScript 5. See&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;      the ``safe`` parameter for more information.&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;    :param encoder: Should be an json encoder class. Defaults to&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;      ``django.core.serializers.json.DjangoJSONEncoder``.&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;    :param safe: Controls if only ``dict`` objects may be serialized. Defaults&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;      to ``True``.&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;, data, encoder=DjangoJSONEncoder, safe=&lt;span class=&quot;predefined-constant&quot;&gt;True&lt;/span&gt;, **kwargs):
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; safe &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;isinstance&lt;/span&gt;(data, &lt;span class=&quot;predefined&quot;&gt;dict&lt;/span&gt;):
            &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;In order to allow non-dict objects to be &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;serialized set the safe parameter to False&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
        kwargs.setdefault(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;content_type&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
        data = json.dumps(data, cls=encoder)
        &lt;span class=&quot;predefined&quot;&gt;super&lt;/span&gt;(JsonResponse, &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;).__init__(content=data, **kwargs)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;What DjangoJSONEncoder does is checking the variables which can not be encoded into
json by python’s json library. Its’ “default” method is a fallback. In my case, it
changes a decimal to a string.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/django/django/blob/stable/1.7.x/django/core/serializers/json.py&quot;&gt;django 1.7 DjangoJSONEncoder&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;DjangoJSONEncoder&lt;/span&gt;(json.JSONEncoder):
    &lt;span class=&quot;docstring&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;    JSONEncoder subclass that knows how to encode date/time and decimal types.&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;default&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;, o):
        &lt;span class=&quot;comment&quot;&gt;# See &amp;quot;Date Time String Format&amp;quot; in the ECMA-262 specification.&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;isinstance&lt;/span&gt;(o, datetime.datetime):
            r = o.isoformat()
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; o.microsecond:
                r = r[:&lt;span class=&quot;integer&quot;&gt;23&lt;/span&gt;] + r[&lt;span class=&quot;integer&quot;&gt;26&lt;/span&gt;:]
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; r.endswith(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;+00:00&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;):
                r = r[:-&lt;span class=&quot;integer&quot;&gt;6&lt;/span&gt;] + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; r
        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;isinstance&lt;/span&gt;(o, datetime.date):
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; o.isoformat()
        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;isinstance&lt;/span&gt;(o, datetime.time):
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; is_aware(o):
                &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;ValueError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;JSON can&#39;t represent timezone-aware times.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
            r = o.isoformat()
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; o.microsecond:
                r = r[:&lt;span class=&quot;integer&quot;&gt;12&lt;/span&gt;]
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; r
        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;isinstance&lt;/span&gt;(o, decimal.Decimal):
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(o)
        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;super&lt;/span&gt;(DjangoJSONEncoder, &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;).default(o)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In python’s json encoder, _iterencode do not encode decimal so it ask the default
function to change it into another iteratable type, then encode it again (recursively).
DjangoJSONEncoder’s default then give it a string and the decimals finally become strings.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/python/cpython/blob/2.7/Lib/json/encoder.py&quot;&gt;python 2.7 cpython/Lib/json/encoder.py&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;_iterencode&lt;/span&gt;(o, _current_indent_level):
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;isinstance&lt;/span&gt;(o, &lt;span class=&quot;predefined&quot;&gt;basestring&lt;/span&gt;):
        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; _encoder(o)
    &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; o &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;None&lt;/span&gt;:
        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; o &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;True&lt;/span&gt;:
        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; o &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;False&lt;/span&gt;:
        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;isinstance&lt;/span&gt;(o, (&lt;span class=&quot;predefined&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;predefined&quot;&gt;long&lt;/span&gt;)):
        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(o)
    &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;isinstance&lt;/span&gt;(o, &lt;span class=&quot;predefined&quot;&gt;float&lt;/span&gt;):
        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; _floatstr(o)
    &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;isinstance&lt;/span&gt;(o, (&lt;span class=&quot;predefined&quot;&gt;list&lt;/span&gt;, &lt;span class=&quot;predefined&quot;&gt;tuple&lt;/span&gt;)):
        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; chunk &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; _iterencode_list(o, _current_indent_level):
            &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; chunk
    &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;isinstance&lt;/span&gt;(o, &lt;span class=&quot;predefined&quot;&gt;dict&lt;/span&gt;):
        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; chunk &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; _iterencode_dict(o, _current_indent_level):
            &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; chunk
    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; markers &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;None&lt;/span&gt;:
            markerid = &lt;span class=&quot;predefined&quot;&gt;id&lt;/span&gt;(o)
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; markerid &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; markers:
                &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;ValueError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Circular reference detected&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
            markers[markerid] = o
        o = _default(o)
        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; chunk &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; _iterencode(o, _current_indent_level):
            &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; chunk
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; markers &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;None&lt;/span&gt;:
            &lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; markers[markerid]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;quick-solution-float&quot;&gt;Quick solution: float&lt;/h1&gt;

&lt;p&gt;The first solution I found in stackoverflow is making a new class which inherit from DjangoJSONEncoder and return decimal’s float version. This works if I do not need the fixed point number.&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; str(Decimal(1.1))
&#39;1.100000000000000088817841970012523233890533447265625&#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;final-solution-simplejson&quot;&gt;Final solution: simplejson&lt;/h1&gt;

&lt;p&gt;Install simplejson (easy_install simplejson). Then write a new encoder (modified
version of django’s). Now the simplejson take care of decimals while I can still
encode the other objects (for example, datetime) in prefered formats if I need to.&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;simplejson&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;default_json_encoder&lt;/span&gt;(o) :
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;isinstance&lt;/span&gt;(o, datetime.datetime):
        r = o.isoformat()
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; o.microsecond:
            r = r[:&lt;span class=&quot;integer&quot;&gt;23&lt;/span&gt;] + r[&lt;span class=&quot;integer&quot;&gt;26&lt;/span&gt;:]
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; r.endswith(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;+00:00&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;):
            r = r[:-&lt;span class=&quot;integer&quot;&gt;6&lt;/span&gt;] + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; r
    &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;isinstance&lt;/span&gt;(o, datetime.date):
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; o.isoformat()
    &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;isinstance&lt;/span&gt;(o, datetime.time):
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; is_aware(o):
            &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;ValueError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;JSON can&#39;t represent timezone-aware times.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
        r = o.isoformat()
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; o.microsecond:
            r = r[:&lt;span class=&quot;integer&quot;&gt;12&lt;/span&gt;]
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; r
    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:
        &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;predefined&quot;&gt;repr&lt;/span&gt;(o) + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; is not JSON serializable&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;JsonResponse&lt;/span&gt;(HttpResponse):
    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;, data, safe=&lt;span class=&quot;predefined-constant&quot;&gt;True&lt;/span&gt;, **kwargs):
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; safe &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;isinstance&lt;/span&gt;(data, &lt;span class=&quot;predefined&quot;&gt;dict&lt;/span&gt;):
            &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;In order to allow non-dict objects to be &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;serialized set the safe parameter to False&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
        kwargs.setdefault(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;content_type&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
        data = simplejson.dumps(data, default=default_json_encoder)
        &lt;span class=&quot;predefined&quot;&gt;super&lt;/span&gt;(JsonResponse, &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;).__init__(content=data, **kwargs)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 30 Apr 2015 00:00:00 +0800</pubDate>
        <link>http://ironhead.bitbucket.com/2015/04/30/decimal-in-django-json-encoder.html</link>
        <guid isPermaLink="true">http://ironhead.bitbucket.com/2015/04/30/decimal-in-django-json-encoder.html</guid>
        
        <category>python</category>
        
        <category>django</category>
        
        
      </item>
    
      <item>
        <title>Arduino SSD1306 LED</title>
        <description>&lt;p&gt;A more simple version of &lt;a href=&quot;http://www.instructables.com/id/How-to-use-OLED-display-arduino-module/&quot;&gt;Instructables example&lt;/a&gt;.
For me, the most interesting part is the speeds to fill 1 byte ad fill 128 bytes in the same page
are almost the same.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/arduino_ssd1306.jpg&quot; alt=&quot;arduino + ssd1306&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;comment&quot;&gt;// SSD1306&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// https://www.adafruit.com/datasheets/SSD1306.pdf&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// 5v&lt;/span&gt;

&lt;span class=&quot;preprocessor&quot;&gt;#define&lt;/span&gt; PIN_DATA_COMMAND  (&lt;span class=&quot;integer&quot;&gt;11&lt;/span&gt;)
&lt;span class=&quot;preprocessor&quot;&gt;#define&lt;/span&gt; PIN_RESET         (&lt;span class=&quot;integer&quot;&gt;13&lt;/span&gt;)
&lt;span class=&quot;preprocessor&quot;&gt;#define&lt;/span&gt; PIN_SCL           (&lt;span class=&quot;integer&quot;&gt;10&lt;/span&gt;)
&lt;span class=&quot;preprocessor&quot;&gt;#define&lt;/span&gt; PIN_SDA           (&lt;span class=&quot;integer&quot;&gt;9&lt;/span&gt;)

&lt;span class=&quot;directive&quot;&gt;void&lt;/span&gt; led_send(&lt;span class=&quot;predefined-type&quot;&gt;bool&lt;/span&gt; is_data, uint8_t data) {
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (is_data) {
    digitalWrite(PIN_DATA_COMMAND, HIGH);
  } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
    digitalWrite(PIN_DATA_COMMAND, LOW);
  }

  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;predefined-type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;integer&quot;&gt;8&lt;/span&gt;; ++i) {
    digitalWrite(PIN_SCL, LOW);

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (data &amp;amp; &lt;span class=&quot;hex&quot;&gt;0x80&lt;/span&gt;) {
      digitalWrite(PIN_SDA, &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;);
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
      digitalWrite(PIN_SDA, &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;);
    }

    digitalWrite(PIN_SCL, HIGH);

    data &amp;lt;&amp;lt;= &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;;
  }
}

&lt;span class=&quot;directive&quot;&gt;void&lt;/span&gt; led_send_data(uint8_t data) {
  led_send(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;, data);
}

&lt;span class=&quot;directive&quot;&gt;void&lt;/span&gt; led_send_command(uint8_t command) {
  led_send(&lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;, command);
}

&lt;span class=&quot;directive&quot;&gt;void&lt;/span&gt; led_init() {
  digitalWrite(PIN_SCL, HIGH);
  digitalWrite(PIN_RESET, LOW);
  delay(&lt;span class=&quot;integer&quot;&gt;50&lt;/span&gt;);
  digitalWrite(PIN_RESET, HIGH);
  digitalWrite(PIN_SCL, LOW);

  &lt;span class=&quot;comment&quot;&gt;// display off (sleep mode)&lt;/span&gt;
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0xae&lt;/span&gt;);

  &lt;span class=&quot;comment&quot;&gt;// segment remap (?)&lt;/span&gt;
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0xa1&lt;/span&gt;);

  &lt;span class=&quot;comment&quot;&gt;// VCOMH deselect level (?)&lt;/span&gt;
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0xdb&lt;/span&gt;);
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0x40&lt;/span&gt;);

  &lt;span class=&quot;comment&quot;&gt;// pre-charge period&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// http://en.wikipedia.org/wiki/Pre-charge&lt;/span&gt;
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0xd9&lt;/span&gt;);
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0xf1&lt;/span&gt;);

  &lt;span class=&quot;comment&quot;&gt;// COM pins hardware configuration (?)&lt;/span&gt;
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0xda&lt;/span&gt;);
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0x12&lt;/span&gt;);

  &lt;span class=&quot;comment&quot;&gt;// memory addressing mode&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// 0x00 : horizontal&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// 0x01 : vertical&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// 0x02 : page&lt;/span&gt;
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0x20&lt;/span&gt;);
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0x02&lt;/span&gt;);

  &lt;span class=&quot;comment&quot;&gt;// enable charge pump, dc/dc converter&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// http://en.wikipedia.org/wiki/Charge_pump&lt;/span&gt;
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0x8d&lt;/span&gt;);
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0x14&lt;/span&gt;);

  &lt;span class=&quot;comment&quot;&gt;// display start line? (0x40 | (0 ~ 63))&lt;/span&gt;
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0x40&lt;/span&gt; | &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;);

  &lt;span class=&quot;comment&quot;&gt;// display offset (vertical shift), 0 ~ 63&lt;/span&gt;
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0xd3&lt;/span&gt;);
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0x00&lt;/span&gt;);

  &lt;span class=&quot;comment&quot;&gt;// multiplex ratio&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// http://en.wikipedia.org/wiki/Multiplexed_display&lt;/span&gt;
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0xa8&lt;/span&gt;);
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0x3f&lt;/span&gt;);

  &lt;span class=&quot;comment&quot;&gt;// display clock divide ratio / oscillator frequency&lt;/span&gt;
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0xd5&lt;/span&gt;);
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0x80&lt;/span&gt;);

  &lt;span class=&quot;comment&quot;&gt;// contrast&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// double byte, 2nd byte means contrast. Constrast increases as it increses.&lt;/span&gt;
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0x81&lt;/span&gt;);
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0x00&lt;/span&gt;);

  &lt;span class=&quot;comment&quot;&gt;// entire display off&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// 0xa4 : pixels are on based on datas in RAM&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// 0xa5 : all pixels are on&lt;/span&gt;
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0xa4&lt;/span&gt;);

  &lt;span class=&quot;comment&quot;&gt;// normal display&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// 0xa6 : bit 0 -&amp;gt; pixel off, bit 1 -&amp;gt; pixel on&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// 0xa7 : bit 1 -&amp;gt; pixel off, bit 0 -&amp;gt; pixel on&lt;/span&gt;
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0xa6&lt;/span&gt;);

  &lt;span class=&quot;comment&quot;&gt;// display on (normal mode)&lt;/span&gt;
  led_send_command(&lt;span class=&quot;hex&quot;&gt;0xaf&lt;/span&gt;);
}

&lt;span class=&quot;directive&quot;&gt;void&lt;/span&gt; led_fill(&lt;span class=&quot;directive&quot;&gt;const&lt;/span&gt; uint8_t* map) {
  uint8_t y;

  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (y = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;; y &amp;lt; &lt;span class=&quot;integer&quot;&gt;8&lt;/span&gt;; ++y) {
    led_send_command(&lt;span class=&quot;hex&quot;&gt;0xb0&lt;/span&gt; + y);
    led_send_command(&lt;span class=&quot;hex&quot;&gt;0x01&lt;/span&gt;);
    led_send_command(&lt;span class=&quot;hex&quot;&gt;0x10&lt;/span&gt;);

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;predefined-type&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;; x &amp;lt; &lt;span class=&quot;integer&quot;&gt;128&lt;/span&gt;; ++x) {
      led_send_data(*map++);
    }
  }
}

uint8_t led_set_pixel(uint8_t* map, &lt;span class=&quot;predefined-type&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;predefined-type&quot;&gt;int&lt;/span&gt; y, uint8_t c) {
  &lt;span class=&quot;comment&quot;&gt;// to page&lt;/span&gt;
  map += &lt;span class=&quot;integer&quot;&gt;128&lt;/span&gt; * (y / &lt;span class=&quot;integer&quot;&gt;8&lt;/span&gt;);

  y %= &lt;span class=&quot;integer&quot;&gt;8&lt;/span&gt;;

  &lt;span class=&quot;comment&quot;&gt;// to row&lt;/span&gt;
  map += x;

  &lt;span class=&quot;comment&quot;&gt;// set col&lt;/span&gt;
  *map &amp;amp;= ~(&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; y);
  *map |=  (c &amp;lt;&amp;lt; y);

  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *map;
}

uint8_t display_map[&lt;span class=&quot;integer&quot;&gt;1024&lt;/span&gt;];

uint8_t pixel = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;;

&lt;span class=&quot;directive&quot;&gt;void&lt;/span&gt; setup() {
  pinMode(PIN_SCL,OUTPUT);
  pinMode(PIN_SDA,OUTPUT);
  pinMode(PIN_RESET,OUTPUT);
  pinMode(PIN_DATA_COMMAND,OUTPUT);

  led_init();
  led_fill(display_map);
}

&lt;span class=&quot;directive&quot;&gt;void&lt;/span&gt; loop() {
  pixel ^= &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;;

  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;predefined-type&quot;&gt;int&lt;/span&gt; y = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt; ; y &amp;lt; &lt;span class=&quot;integer&quot;&gt;64&lt;/span&gt;; ++y) {
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;predefined-type&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;; x &amp;lt; &lt;span class=&quot;integer&quot;&gt;128&lt;/span&gt;; ++x) {
      led_send_command(&lt;span class=&quot;hex&quot;&gt;0xb0&lt;/span&gt; + y / &lt;span class=&quot;integer&quot;&gt;8&lt;/span&gt;);
      led_send_command(&lt;span class=&quot;hex&quot;&gt;0x00&lt;/span&gt; + x % &lt;span class=&quot;integer&quot;&gt;16&lt;/span&gt;);
      led_send_command(&lt;span class=&quot;hex&quot;&gt;0x10&lt;/span&gt; + x / &lt;span class=&quot;integer&quot;&gt;16&lt;/span&gt;);

      led_send_data(led_set_pixel(display_map, x, y, pixel));

      delay(&lt;span class=&quot;integer&quot;&gt;100&lt;/span&gt;);
    }
  }
}

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 04 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://ironhead.bitbucket.com/2015/03/04/arduino-33d1306.html</link>
        <guid isPermaLink="true">http://ironhead.bitbucket.com/2015/03/04/arduino-33d1306.html</guid>
        
        <category>arduinno</category>
        
        
      </item>
    
      <item>
        <title>CSRF of WebApp Frameworks</title>
        <description>&lt;h1 id=&quot;csrf-protection-in-rails-4-2-stable&quot;&gt;CSRF Protection in Rails (4-2-stable)&lt;/h1&gt;

&lt;h2 id=&quot;generate&quot;&gt;Generate&lt;/h2&gt;
&lt;p&gt;In rails, we can find a csrf token in the head of html or a hidden input of forms:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;csrf-token&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;attribute-name&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;V6CZMZGA+lnkmonZbw74c81KAGjBAlK6Jk1UEbQkW95zjIMxU/G5ixcbokIG5GIzlG2gwtag4la/eLoTXT6/Dw==&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
             &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;authenticity_token&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
             &lt;span class=&quot;attribute-name&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;OFkGlN+ho64ffPlNEJ7P01VPO+dC7yQ96rl13pKNV8McdRyUHdDgfOz90tZ5dFWTDGibTVVNlNFzjJvce5ezEg==&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Those tokens are generated in &lt;a href=&quot;https://github.com/rails/rails/blob/4-2-stable/actionpack/lib/action_controller/metal/request_forgery_protection.rb&quot;&gt;ActionController&lt;/a&gt;
and not predictable (that’s what we need for csrf protection).
In &lt;a href=&quot;https://github.com/rails/rails/blob/4-2-stable/actionview/lib/action_view/helpers/csrf_helper.rb&quot;&gt;ActionView module&lt;/a&gt; we can find how csrf meta tags are generated:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;csrf_meta_tags&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; protect_against_forgery?
    [
      tag(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:name&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;csrf-param&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:content&lt;/span&gt; =&amp;gt; request_forgery_protection_token),
      tag(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:name&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;csrf-token&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:content&lt;/span&gt; =&amp;gt; form_authenticity_token)
    ].join(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;).html_safe
  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The methods &lt;strong&gt;form_authenticity_token&lt;/strong&gt; is in &lt;a href=&quot;https://github.com/rails/rails/blob/4-2-stable/actionpack/lib/action_controller/metal/request_forgery_protection.rb&quot;&gt;ActionController&lt;/a&gt; :&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;constant&quot;&gt;AUTHENTICITY_TOKEN_LENGTH&lt;/span&gt; = &lt;span class=&quot;integer&quot;&gt;32&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;form_authenticity_token&lt;/span&gt;
  masked_authenticity_token(session)
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;masked_authenticity_token&lt;/span&gt;(session)
  one_time_pad = &lt;span class=&quot;constant&quot;&gt;SecureRandom&lt;/span&gt;.random_bytes(&lt;span class=&quot;constant&quot;&gt;AUTHENTICITY_TOKEN_LENGTH&lt;/span&gt;)
  encrypted_csrf_token = xor_byte_strings(one_time_pad, real_csrf_token(session))
  masked_token = one_time_pad + encrypted_csrf_token
  &lt;span class=&quot;constant&quot;&gt;Base64&lt;/span&gt;.strict_encode64(masked_token)
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;valid_authenticity_token?&lt;/span&gt;(session, encoded_masked_token)
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; encoded_masked_token.nil? || encoded_masked_token.empty?

  &lt;span class=&quot;keyword&quot;&gt;begin&lt;/span&gt;
    masked_token = &lt;span class=&quot;constant&quot;&gt;Base64&lt;/span&gt;.strict_decode64(encoded_masked_token)
  &lt;span class=&quot;keyword&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;ArgumentError&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# encoded_masked_token is invalid Base64&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;comment&quot;&gt;# See if it&#39;s actually a masked token or not. In order to&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;# deploy this code, we should be able to handle any unmasked&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;# tokens that we&#39;ve issued without error.&lt;/span&gt;

  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; masked_token.length == &lt;span class=&quot;constant&quot;&gt;AUTHENTICITY_TOKEN_LENGTH&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;# This is actually an unmasked token. This is expected if&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;# you have just upgraded to masked tokens, but should stop&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;# happening shortly after installing this gem&lt;/span&gt;
    compare_with_real_token masked_token, session

  &lt;span class=&quot;keyword&quot;&gt;elsif&lt;/span&gt; masked_token.length == &lt;span class=&quot;constant&quot;&gt;AUTHENTICITY_TOKEN_LENGTH&lt;/span&gt; * &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;# Split the token into the one-time pad and the encrypted&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;# value and decrypt it&lt;/span&gt;
    one_time_pad = masked_token[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;...&lt;span class=&quot;constant&quot;&gt;AUTHENTICITY_TOKEN_LENGTH&lt;/span&gt;]
    encrypted_csrf_token = masked_token[&lt;span class=&quot;constant&quot;&gt;AUTHENTICITY_TOKEN_LENGTH&lt;/span&gt;..&lt;span class=&quot;integer&quot;&gt;-1&lt;/span&gt;]
    csrf_token = xor_byte_strings(one_time_pad, encrypted_csrf_token)

    compare_with_real_token csrf_token, session

  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Token is malformed&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;real_csrf_token&lt;/span&gt;(session)
  session[&lt;span class=&quot;symbol&quot;&gt;:_csrf_token&lt;/span&gt;] ||= &lt;span class=&quot;constant&quot;&gt;SecureRandom&lt;/span&gt;.base64(&lt;span class=&quot;constant&quot;&gt;AUTHENTICITY_TOKEN_LENGTH&lt;/span&gt;)
  &lt;span class=&quot;constant&quot;&gt;Base64&lt;/span&gt;.strict_decode64(session[&lt;span class=&quot;symbol&quot;&gt;:_csrf_token&lt;/span&gt;])
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In brief, a token is generated by this steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For each session, a random 32 bytes long token in base 64 is generated (44 long).&lt;/li&gt;
  &lt;li&gt;Decode this token with base64 (to 32 bytes binary token).&lt;/li&gt;
  &lt;li&gt;Everytime when we need a form authenticity token, a 32 bytes one time pad is generated.&lt;/li&gt;
  &lt;li&gt;XOR one time pad and csrf token to encrypted_csrf_token.&lt;/li&gt;
  &lt;li&gt;Concatenate csrf token and encrypted_csrf_token (32 + 32 = 64 bytes).&lt;/li&gt;
  &lt;li&gt;Encode the result in base64 give us the final csrf token (64 * (4/3) = 88 bytes).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;code-tracing-verification&quot;&gt;Code tracing verification&lt;/h2&gt;

&lt;p&gt;Now open a rails site in browser and find the csrf token, refresh the page to get 2 different tokens.
In rails console def a decode method and pass those tokens to see the result. The result should be the same.&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;comment&quot;&gt;# extract from valid_authenticity_token?&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;decode&lt;/span&gt;(token)
  token = &lt;span class=&quot;constant&quot;&gt;Base64&lt;/span&gt;.strict_decode64 token
  t1 = token[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;...&lt;span class=&quot;integer&quot;&gt;32&lt;/span&gt;]
  t2 = token[&lt;span class=&quot;integer&quot;&gt;32&lt;/span&gt;..&lt;span class=&quot;integer&quot;&gt;-1&lt;/span&gt;]
  t1.bytes.zip(t2.bytes).map { |(c1,c2)| c1 ^ c2 }.pack(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;c*&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then re-launch the browser and decode another token, the result should be changed (bound to session!).&lt;/p&gt;

&lt;h1 id=&quot;csrf-protection-in-nodejs&quot;&gt;CSRF Protection in Nodejs&lt;/h1&gt;

&lt;p&gt;In &lt;a href=&quot;https://github.com/expressjs/csurf/blob/master/index.js&quot;&gt;CSURF middleware&lt;/a&gt;, a secret is generated
using secretSync method of &lt;a href=&quot;https://github.com/pillarjs/csrf/blob/master/index.js&quot;&gt;csrf module&lt;/a&gt; which return
pseudo random bytes.&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;comment&quot;&gt;// generate &amp;amp; set new secret&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sec === &lt;span class=&quot;predefined-constant&quot;&gt;undefined&lt;/span&gt;) {
  sec = tokens.secretSync()
  setsecret(req, res, sec, cookie)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then in &lt;a href=&quot;https://github.com/pillarjs/csrf/blob/master/index.js&quot;&gt;csrf module&lt;/a&gt;, use tokenize method to generate
the final token:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;csrfTokens.&lt;span class=&quot;function&quot;&gt;tokenize&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;tokenize&lt;/span&gt;(secret, salt) {
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hash = escape(crypto
    .createHash(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
    .update(salt)
    .update(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
    .update(secret)
    .digest(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;))
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; salt + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; + hash
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;To verify the token, re-generate the token with salt and secret and compare the result. As in the
tokenize method, salt is in the beginning of the final token and hash is generated base on salt and
the pseudo randome secret.&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;function&quot;&gt;verify&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;verify&lt;/span&gt;(secret, token) {
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!secret || &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; secret !== &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;
  }

  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!token || &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; token !== &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;
  }

  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; index = token.indexOf(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)

  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (index === -&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;) {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;
  }

  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; salt = token.substr(&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;, index)
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; expected = tokenize(secret, salt)

  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; scmp(token, expected)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;code-tracing-verification-1&quot;&gt;Code tracing verification&lt;/h2&gt;

&lt;p&gt;Can not verify if we don’t known the secret.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/blob/4-2-stable/actionpack/lib/action_controller/metal/request_forgery_protection.rb&quot;&gt;Rails ActionController&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pillarjs/csrf/blob/master/index.js&quot;&gt;Nodejs CSRF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/expressjs/csurf/blob/master/index.js&quot;&gt;Nodejs CSURF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 31 Jan 2015 00:00:00 +0800</pubDate>
        <link>http://ironhead.bitbucket.com/2015/01/31/webapp-csrf.html</link>
        <guid isPermaLink="true">http://ironhead.bitbucket.com/2015/01/31/webapp-csrf.html</guid>
        
        <category>nodejs</category>
        
        <category>rails</category>
        
        <category>programming</category>
        
        
      </item>
    
      <item>
        <title>Fibonacci in Go</title>
        <description>&lt;p&gt;Implement fibonacci to evaluate golang.&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (
  &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;math/big&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
)


&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; M2 &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; {
  e00, e01, e10, e11 big.Int
}

&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; NewM2(e00, e01, e10, e11 &lt;span class=&quot;predefined-type&quot;&gt;int64&lt;/span&gt;) *M2 {
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;M2 {
    *big.NewInt(e00),
    *big.NewInt(e01),
    *big.NewInt(e10),
    *big.NewInt(e11) }
}

&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (m *M2) String() &lt;span class=&quot;predefined-type&quot;&gt;string&lt;/span&gt; {
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fmt.Sprintf(
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;[[ %v, %v ], [ %v, %v ]]&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &amp;amp;m.e00, &amp;amp;m.e01, &amp;amp;m.e10, &amp;amp;m.e11)
}

&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; Add(m, n *M2) *M2 {
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; r M2

  (&amp;amp;r.e00).Add(&amp;amp;m.e00, &amp;amp;n.e00)
  (&amp;amp;r.e01).Add(&amp;amp;m.e01, &amp;amp;n.e01)
  (&amp;amp;r.e10).Add(&amp;amp;m.e10, &amp;amp;n.e10)
  (&amp;amp;r.e11).Add(&amp;amp;m.e11, &amp;amp;n.e11)

  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;r
}

&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; Mul(m, n *M2) *M2 {
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; r M2

  (&amp;amp;r.e00).Add(&lt;span class=&quot;predefined&quot;&gt;new&lt;/span&gt;(big.Int).Mul(&amp;amp;m.e00, &amp;amp;n.e00),
               &lt;span class=&quot;predefined&quot;&gt;new&lt;/span&gt;(big.Int).Mul(&amp;amp;m.e01, &amp;amp;n.e10))
  (&amp;amp;r.e01).Add(&lt;span class=&quot;predefined&quot;&gt;new&lt;/span&gt;(big.Int).Mul(&amp;amp;m.e00, &amp;amp;n.e01),
               &lt;span class=&quot;predefined&quot;&gt;new&lt;/span&gt;(big.Int).Mul(&amp;amp;m.e01, &amp;amp;n.e11))
  (&amp;amp;r.e10).Add(&lt;span class=&quot;predefined&quot;&gt;new&lt;/span&gt;(big.Int).Mul(&amp;amp;m.e10, &amp;amp;n.e00),
               &lt;span class=&quot;predefined&quot;&gt;new&lt;/span&gt;(big.Int).Mul(&amp;amp;m.e11, &amp;amp;n.e10))
  (&amp;amp;r.e11).Add(&lt;span class=&quot;predefined&quot;&gt;new&lt;/span&gt;(big.Int).Mul(&amp;amp;m.e10, &amp;amp;n.e01),
               &lt;span class=&quot;predefined&quot;&gt;new&lt;/span&gt;(big.Int).Mul(&amp;amp;m.e11, &amp;amp;n.e11))

  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;r
}

&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; IsOdd(i *big.Int) &lt;span class=&quot;predefined-type&quot;&gt;bool&lt;/span&gt; {
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt; == &lt;span class=&quot;predefined&quot;&gt;new&lt;/span&gt;(big.Int).Mod(i, big.NewInt(&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;)).Cmp(big.NewInt(&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;))
}

&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; Pow(m *M2, p *big.Int) *M2 {
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; p.Cmp(big.NewInt(&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;)) == &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt; {
    &lt;span class=&quot;comment&quot;&gt;// should ???&lt;/span&gt;
    t := *m
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;t
  } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
    t := Pow(m, &lt;span class=&quot;predefined&quot;&gt;new&lt;/span&gt;(big.Int).Div(p, big.NewInt(&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;)))

    t = Mul(t, t)

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; IsOdd(p) {
      t = Mul(t, m)
    }

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; t
  }
}

&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; Fib(i *big.Int) *big.Int {
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;Pow(NewM2(&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;), i).e10
}

&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {
  fmt.Println(Fib(big.NewInt(&lt;span class=&quot;integer&quot;&gt;1000&lt;/span&gt;)))
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 26 Jan 2015 00:00:00 +0800</pubDate>
        <link>http://ironhead.bitbucket.com/2015/01/26/fibonacci-in-golang.html</link>
        <guid isPermaLink="true">http://ironhead.bitbucket.com/2015/01/26/fibonacci-in-golang.html</guid>
        
        <category>golang</category>
        
        <category>programming</category>
        
        
      </item>
    
      <item>
        <title>Sketch: Another Long Hair Girl</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/images/sketch-0001.jpg&quot; alt=&quot;Another Long Hair Girl&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Jan 2015 00:00:00 +0800</pubDate>
        <link>http://ironhead.bitbucket.com/2015/01/17/sketch.html</link>
        <guid isPermaLink="true">http://ironhead.bitbucket.com/2015/01/17/sketch.html</guid>
        
        <category>sketch</category>
        
        
      </item>
    
      <item>
        <title>Node.js Security Note</title>
        <description>&lt;h1 id=&quot;dependency&quot;&gt;Dependency&lt;/h1&gt;

&lt;p&gt;The version of express is 4.10.6. When this note was made, I still found many code samples for express 3. So I guess this note would also to be deprecated soon.&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://cdn.oreillystatic.com/en/assets/1/event/106/Top%20Overlooked%20Security%20Threats%20To%20Node_js%20Web%20Applications%20Presentation%201.pdf&quot;&gt;Top Overlooked Security Threats To Node.js Web Applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;csrf&quot;&gt;CSRF&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/expressjs/csurf&quot;&gt;csurf: Node.js CSRF protection middleware&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;comment&quot;&gt;// dependency&lt;/span&gt;
{
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;csurf&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;^1.6.5&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  }
}

&lt;span class=&quot;comment&quot;&gt;// routes&lt;/span&gt;
app.use(csrf());
app.use(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(req, res, next) {
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; token = req.csrfToken();

  &lt;span class=&quot;comment&quot;&gt;// for jade&lt;/span&gt;
  res.locals.csrfToken = token;
  &lt;span class=&quot;comment&quot;&gt;// for Angularjs&lt;/span&gt;
  res.cookie(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;XSRF-TOKEN&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, token);

  next();
});
app.use(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(err, req, res, next) {
  &lt;span class=&quot;comment&quot;&gt;// called if there are errors.&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err.code !== &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;EBADCSRFTOKEN&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; next(err);
  }

  &lt;span class=&quot;comment&quot;&gt;// handle CSRF token errors here&lt;/span&gt;
  res.status(&lt;span class=&quot;integer&quot;&gt;403&lt;/span&gt;);
  res.send(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;leave me alone~~&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

  console.log(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;bad csrf token&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
});
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In forms with method “POST”, set a hidden field with name “_csrf”:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;form(method=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, action=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/csrf&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
  input(type=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, name=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;_csrf&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, value=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;#{ csrfToken }&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Angularjs read cookie ‘XSRF-TOKEN’ and send it back in header. Extra works are needed for jQuery.&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;html
  head
    meta(name=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;csrf-token&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, content=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;#{ csrfToken }&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

    script.
      &lt;span class=&quot;predefined&quot;&gt;$&lt;/span&gt;(document).ready(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (e) {
        &lt;span class=&quot;predefined&quot;&gt;$&lt;/span&gt;.ajaxPrefilter(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(options, _, xhr) {
          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!xhr.crossDomain) {
            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; token = &lt;span class=&quot;predefined&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;meta[name=&amp;quot;csrf-token&amp;quot;]&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;).attr(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;);

            xhr.setRequestHeader(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;X-CSRF-Token&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, token);
          }
        });
      });
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note: Why setRequestHeader for jQuery&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In most cases, setting _csrf in data field when post via ajax is enough. The problem surfaces when uploading files with “multipart/form-data”. If &lt;a href=&quot;https://github.com/andrewrk/node-multiparty/&quot;&gt;multiparty&lt;/a&gt; is used to handling file uploading, csrf checking happens before form processing which fails every time, because bodyparser ignore multipart form.&lt;/p&gt;

&lt;h1 id=&quot;expose-less-information-to-attackers&quot;&gt;Expose Less Information to Attackers&lt;/h1&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = express();

&lt;span class=&quot;comment&quot;&gt;// Disable the useless header &amp;quot;x-powered-by&amp;quot; whose value is &amp;quot;Express&amp;quot;.&lt;/span&gt;
app.disable(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;x-powered-by&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;// The default session cookie key of express is &amp;quot;connect.sid&amp;quot;, change it.&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// Secure cookie send session via https only.&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// express session always set session a httponly cookie.&lt;/span&gt;
app.use(session({
  &lt;span class=&quot;key&quot;&gt;secret&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;do not touch me&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;key&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;session_id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;cookie&lt;/span&gt;: {
    &lt;span class=&quot;key&quot;&gt;secure&lt;/span&gt;: &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;
  }
}));
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 17 Jan 2015 00:00:00 +0800</pubDate>
        <link>http://ironhead.bitbucket.com/2015/01/17/nodejs-security-note.html</link>
        <guid isPermaLink="true">http://ironhead.bitbucket.com/2015/01/17/nodejs-security-note.html</guid>
        
        <category>nodejs</category>
        
        <category>programming</category>
        
        
      </item>
    
      <item>
        <title>Conway&#39;s Game of Life on CodeSkulptor</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.codeskulptor.org/#user38_iF5tSbexuT1XG1M_5.py&quot;&gt;CodeSkulptor&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;simplegui&lt;/span&gt;


&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;GameOfLife&lt;/span&gt; :
  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;, col_num, row_num, cell_size, line_size = &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;) :
    &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._col_num = col_num
    &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._row_num = row_num
    &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cell_size = cell_size
    &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._line_size = line_size

    &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cells = [[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;] * col_num &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;range&lt;/span&gt;(row_num)]

  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;get_width&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;) :
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._col_num * (&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cell_size + &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._line_size) + &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._line_size

  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;get_height&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;) :
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._row_num * (&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cell_size + &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._line_size) + &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._line_size

  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;get_color_of_cell&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;, x, y) :
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Black&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cells[y][x] == &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Lime&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;get_position_of_cell&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;, x, y) :
    px = x * (&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._line_size + &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cell_size) + &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._line_size + &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;
    py = y * (&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._line_size + &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cell_size) + &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._line_size + &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;
    ww = &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cell_size - &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [(px, py),  (px + ww, py), (px + ww, py + ww), (px, py + ww)]

  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;reset&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;) :
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._row_num) :
      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._col_num) :
        &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cells[y][x] = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;

  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;toggle_cell&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;, x, y) :
    &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cells[y][x] = (&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cells[y][x]) % &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;

  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;toggle_position&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;, position) :
    s = &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._line_size + &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cell_size
    x = position[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;] / s
    y = position[&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;] / s

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x &amp;lt; &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._col_num &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; y &amp;lt; &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._row_num &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; x &amp;gt;= &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; y &amp;gt;= &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt; :
      &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;.toggle_cell(x, y)

  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;update&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;) :
    temp = [[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;] * &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._col_num &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._row_num)]

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._row_num) :
      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._col_num) :
        z  = &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cells[y - &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;][x - &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;]
        z += &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cells[y - &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;][x]
        z += &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cells[y][x - &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;]
        z += &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cells[y][x]

        xx = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x + &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt; == &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._col_num &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; x + &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;
        yy = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; y + &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt; == &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._row_num &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; y + &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;

        z += &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cells[y - &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;][xx]
        z += &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cells[y][xx]
        z += &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cells[yy][x - &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;]
        z += &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cells[yy][x]
        z += &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cells[yy][xx]

        temp[y][x] = z

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._row_num) :
      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._col_num) :
        z = temp[y][x]

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cells[y][x] == &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt; :
          z -= &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; z &amp;lt; &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt; :
          &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cells[y][x] = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; z &amp;lt; &lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt; :
          &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; :
          &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cells[y][x] = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; z == &lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt; :
          &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cells[y][x] = &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;

  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;draw&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;, canvas) :
    width = &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;.get_width()

    y = &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._line_size / &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._row_num) :
      canvas.draw_line((&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;, y), (width, y), &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._line_size, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Teal&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

      y += &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cell_size + &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._line_size

    height = &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;.get_height()

    x = &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._line_size / &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._col_num) :
      canvas.draw_line((x, &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;), (x, height), &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._line_size, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Teal&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

      x += &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._cell_size + &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._line_size

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; y &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._row_num) :
      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;._col_num) :
        color = &lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;.get_color_of_cell(x, y)

        canvas.draw_polygon(&lt;span class=&quot;predefined-constant&quot;&gt;self&lt;/span&gt;.get_position_of_cell(x, y), &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;, color, color)

button_start = &lt;span class=&quot;predefined-constant&quot;&gt;None&lt;/span&gt;
button_clear = &lt;span class=&quot;predefined-constant&quot;&gt;None&lt;/span&gt;
running = &lt;span class=&quot;predefined-constant&quot;&gt;False&lt;/span&gt;

gol = GameOfLife(&lt;span class=&quot;integer&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;38&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;)

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;demo&lt;/span&gt;(name) :
  &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; running

  running = &lt;span class=&quot;predefined-constant&quot;&gt;True&lt;/span&gt;

  gol.reset()

  button_start.set_text(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Pause&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

  patterns = {
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;toad&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : [(&lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;)],
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;blinker&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : [(&lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;)],
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;beacon&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : [(&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;)],
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;pulsar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : [(&lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;), \
    (&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;6&lt;/span&gt;), \
    (&lt;span class=&quot;integer&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;6&lt;/span&gt;), \
    (&lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;7&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;7&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;7&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;7&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;7&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;7&lt;/span&gt;), \
    (&lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;9&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;9&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;9&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;9&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;9&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;9&lt;/span&gt;), \
    (&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;10&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;11&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;12&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;10&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;11&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;12&lt;/span&gt;), \
    (&lt;span class=&quot;integer&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;10&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;11&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;12&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;10&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;11&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;12&lt;/span&gt;), \
    (&lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;14&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;14&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;14&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;14&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;14&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;14&lt;/span&gt;)],
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;glider&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : [(&lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;6&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;7&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;7&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;7&lt;/span&gt;)],
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;lwss&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : [(&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;)]
  }

  &lt;span class=&quot;predefined&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x : gol.toggle_cell(x[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;], x[&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;]), patterns[name])

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;on_mouse_clicked&lt;/span&gt;(position) :
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; running :
    gol.toggle_position(position)

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;on_demo_toad&lt;/span&gt;() :
  demo(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;toad&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;on_demo_blinker&lt;/span&gt;() :
  demo(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;blinker&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;on_demo_beacon&lt;/span&gt;() :
  demo(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;beacon&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;on_demo_pulsar&lt;/span&gt;() :
  demo(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;pulsar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;on_demo_glider&lt;/span&gt;() :
  demo(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;glider&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;on_demo_lwss&lt;/span&gt;() :
  demo(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;lwss&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;on_start&lt;/span&gt;() :
  &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; running

  running = &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; running

  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; running :
    button_start.set_text(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Pause&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; :
    button_start.set_text(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;on_clear&lt;/span&gt;() :
  &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; running

  running = &lt;span class=&quot;predefined-constant&quot;&gt;False&lt;/span&gt;

  button_start.set_text(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

  gol.reset()

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;update_game_of_life&lt;/span&gt;() :
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; running :
    gol.update()

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;on_draw&lt;/span&gt;(canvas) :
  gol.draw(canvas)

&lt;span class=&quot;comment&quot;&gt;# Create a frame and assign callbacks to event handlers&lt;/span&gt;
frame = simplegui.create_frame(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Game of Life&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, gol.get_width(), gol.get_height())

frame.add_button(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Demo Toad&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, on_demo_toad)
frame.add_button(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Demo Blinker&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, on_demo_blinker)
frame.add_button(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Demo Beacon&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, on_demo_beacon)
frame.add_button(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Demo Pulsar&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, on_demo_pulsar)
frame.add_button(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Demo Glider&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, on_demo_glider)
frame.add_button(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Demo LWSS&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, on_demo_lwss)

button_start = frame.add_button(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, on_start)
button_clear = frame.add_button(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, on_clear)

frame.set_mouseclick_handler(on_mouse_clicked)
frame.set_draw_handler(on_draw)
frame.start()

&lt;span class=&quot;comment&quot;&gt;# timer to update&lt;/span&gt;
timer = simplegui.create_timer(&lt;span class=&quot;integer&quot;&gt;500&lt;/span&gt;, update_game_of_life)
timer.start()

on_demo_toad()
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 29 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://ironhead.bitbucket.com/2014/12/29/conways-game-of-life.html</link>
        <guid isPermaLink="true">http://ironhead.bitbucket.com/2014/12/29/conways-game-of-life.html</guid>
        
        <category>python</category>
        
        <category>programming</category>
        
        
      </item>
    
      <item>
        <title>Sketch: Long Hair Girl</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/images/sketch-0000.jpg&quot; alt=&quot;Long Hair Girl&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://ironhead.bitbucket.com/2014/12/21/sketch.html</link>
        <guid isPermaLink="true">http://ironhead.bitbucket.com/2014/12/21/sketch.html</guid>
        
        <category>sketch</category>
        
        
      </item>
    
  </channel>
</rss>
